# Notes for on-the-go development of engine using
# wasm and rust


1/ install Termux
2/ >pkg install rust
2/ >pkg install rust-std-wasm32

* optional if install wasm-bindgen (in Termux)
3/ >export OPENSSL_DIR=$PREFIX
3/ >cargo install wasm-bindgen-cli (26 min)

4/ >nano ~/.bashrc
5/ export PATH=$PATH:$HOME/.cargo/bin
6/ restart Termux
7/ >termux-setup-storage
8/ >cd storage/shared/ScriptIt/ProjectColony/
9/ >cargo new --lib rust
10/ edit lib.rs to add a cdylib

* raw compile
11/ >cargo build --target-dir ~/target --target wasm32-unknown-unknown --release
12/ >ls ~/target/wasm32-unknown-unknown/release
13/ >cat ~/target/wasm32-unknown-unknown/release/asengine.wasm
14/ >cp ~/target/wasm32-unknown-unknown/release/asengine.wasm .
15/ >sh build.sh



# Notes on debian WSL environment
1/ >sudo apt-get install curl
1/ >sudo apt-get install gcc
2/ >curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
3/ >code .
4/ >cd rust/
5/ >cargo test --target-dir ~/target -- --nocapture

# for wasm
6/ >rustup target install wasm32-unknown-unknown
7/ >cargo build --target-dir ~/target --target wasm32-unknown-unknown --release
8/ >cp ~/target/wasm32-unknown-unknown/release/asengine.wasm .

# to run the js part
8/ >sudo apt-get install python3
9/ >python3 -m http.server
10/ on browser, http://localhost:8000

# to reduce the wasm size, to add to build.sh
11/ >cargo install wasm-gc
12/ >wasm-gc ~/target/wasm32-unknown-unknown/release/asengine.wasm asengine.wasm

# to compile with wasm-bindgen (which is unavoidable), note that the version
# of wasm-bindgen-cli needs to match the version of wasm-bindgen in cargo.lock
13/ >sudo apt-get install libssl-dev
13/ >cargo install wasm-bindgen-cli
14/ >export OPENSSL_LIB_DIR="/usr/lib/x86_64-linux-gnu"
15/ >export OPENSSL_INCLUDE_DIR="/usr/include/openssl"

# implementation notes
Javascript initial implementation uses global singleton
modules for each component. This allows each module
to reference to other modules arbitrarily, without
any other references. This probably makes modules
nore tightly coupled than necessary, but makes
for an easier implementation.
The alternative to so singleton, which is accessible
anywhere, is (refer to dependency injection):
- the referred module as a function argument
  (method injection)
  pro: explicit coupling, good practice?
  pro: plays fine with rust and wasm-bindgen
       in that I know it is ok to pass an object
       as mutable reference from Javascript
  con: burden super level to pass the required
       module as argument, if accessible
  con: changes function signature if module referred
  con: might be uneccessary when modules all live
       in rust?
  con: may induce cascade arguments depending on
       data flow, and impact a big chunk of code
       base
- the referred module as a member
  (property injection)
  pro: reduced code modification
  pro: flexibility in calling other modules
  con: lifetime consideration
  con: mutable reference needs to be shared, may
       not be compatible with rust philosophy?
- referred module in constructor
  (constructor injection)
  con: probably impossible in some cases
       because we have cyclic dependencies
       but this could be solved by having the
       super function orchestrating the dependence


# performance notes
Case of a Rust function that returns a box typed array of a few values
to the javascript domain.
Implementation A: 4 calls to a rust function to return 4 i16 values, 
    an array is built out of those 4 values in javascript and returned
Implementation B: One call to a rust function to return a box<[i16]>
    the array is returned as is (Int16Array) or converted.
Observed that the implementation A is faster, emaning that:
- the overhead of calling a rust function 4 times is lower than the overhead
  involved in copying a typed array as a return value of 4 values
  