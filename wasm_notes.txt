# Notes for on-the-go development of engine using
# wasm and rust


1/ install Termux
2/ >pkg install rust
2/ >pkg install rust-std-wasm32

* optional if install wasm-bindgen (in Termux)
3/ >export OPENSSL_DIR=$PREFIX
3/ >cargo install wasm-bindgen-cli (26 min)

4/ >nano ~/.bashrc
5/ export PATH=$PATH:$HOME/.cargo/bin
6/ restart Termux
7/ >termux-setup-storage
8/ >cd storage/shared/ScriptIt/ProjectColony/
9/ >cargo new --lib rust
10/ edit lib.rs to add a cdylib

* raw compile
11/ >cargo build --target-dir ~/target --target wasm32-unknown-unknown --release
12/ >ls ~/target/wasm32-unknown-unknown/release
13/ >cat ~/target/wasm32-unknown-unknown/release/asengine.wasm
14/ >cp ~/target/wasm32-unknown-unknown/release/asengine.wasm .
15/ >sh build.sh



# Notes on debian WSL environment
1/ >sudo apt-get install curl
1/ >sudo apt-get install gcc
2/ >curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
3/ >code .
4/ >cd rust/
5/ >cargo test --target-dir ~/target -- --nocapture

# for wasm
6/ >rustup target install wasm32-unknown-unknown
7/ >cargo build --target-dir ~/target --target wasm32-unknown-unknown --release
8/ >cp ~/target/wasm32-unknown-unknown/release/asengine.wasm .

# to run the js part
8/ >sudo apt-get install python3
9/ >python3 -m http.server
10/ on browser, http://localhost:8000

# to reduce the wasm size, to add to build.sh
11/ >cargo install wasm-gc
12/ >wasm-gc ~/target/wasm32-unknown-unknown/release/asengine.wasm asengine.wasm

# to compile with wasm-bindgen (which is unavoidable), note that the version
# of wasm-bindgen-cli needs to match the version of wasm-bindgen in cargo.lock
13/ >sudo apt-get install libssl-dev
13/ >cargo install wasm-bindgen-cli
14/ >export OPENSSL_LIB_DIR="/usr/lib/x86_64-linux-gnu"
15/ >export OPENSSL_INCLUDE_DIR="/usr/include/openssl"
